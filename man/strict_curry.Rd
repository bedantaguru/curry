% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/real_curry.R
\name{strict_curry}
\alias{Curry}
\alias{\%<!\%}
\alias{strict_curry}
\title{Perform strict currying of a function}
\usage{
fun \%<!\% arg

Curry(fun)
}
\arguments{
\item{fun}{A function to be turned into a curried function.}

\item{arg}{A value to be used when calling the curried function}
}
\value{
A function accepting a single argument and returing either a new
function accepting a single argument, or the result of the function call if
all arguments have been provided.
}
\description{
The \code{curry} function and \code{\%<\%} operator does not perform currying
in the strictest sense since it is really "just" a partial application of the
first argument. Strictly speaking currying transforms a function into a
function taking a single argument and returning a new function accepting a
new argument as long as the original function has arguments left. Once all
arguments has been consumed by function calls it evaluates the original call
and returns the result. Strict currying has less applicability in R as it
cannot work with functions containing `...` in its argument list as it will
never reach the end of the argument list and thus never evaluate the call.
Strict currying is still provided here for completeness. The \code{Curry()}
function turns a function into a curried function reducing the ariety to one.
The \code{\%<!\%} operator both transforms the function into a curried one
and calls it once with the first argument. Once a function is curried it is
still possible to use \code{\%<\%}, \code{\%-<\%}, and \code{\%><\%} though
they all performs the same operation as the function does only accept a
single argument. As with the other functions in the \code{curry} package,
argument names and defaults are retained when performing strict currying.
Calling a curried function without providing a value for it will call it with
the default or set the argument to missing.
}
\examples{
testfun <- function(x, y, z) {
  x + y + z
}
curriedfun <- Curry(testfun)
curriedfun(1)(2)(3)

# Using the operator
testfun \%<!\% 1 \%<!\% 2 \%<!\% 3

# The strict operator is only required for the first call
testfun \%<!\% 1 \%<\% 2 \%<\% 3

}

